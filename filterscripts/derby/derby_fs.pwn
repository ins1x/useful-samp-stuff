/*
    Filterscript: Derby
    Description: Derby minigame system
    Author: 1NS
    Cred: Created speciallly for Oasis DM
    Date: Aprill 2023
    
    Requirements: 
    - Incognito streamer plugin version 2.9.4 or newer
    - foreach (Y_Less)
    
    About derby system:  
    Player type /derby, if no active derby player start new game at free slot   
    else join to active derby  
    Admin can choise derby parameters whe select derby slot (MAX_DERBY_SLOTS)  
    By default, the derby lasts 10 minutes (DerbyRoundTime) fnd last survived player win game  
    At player win game derby has autorestarted at random map with the same parameters.
    When player dying or vehcle destoroyed or or the player fell from the platform into the water
    depending on the derby mode, it can be respawnend or switched for spectating mode.
    Default vehicle health 1500.0.
    
    Derby Modes:
    0. Survival - After vehicle destruction player waiting in spectate when round end
    the last survivor remains the winner
    1. Score - After vehicle destruction player was returned to map
    The winner is the player with the highest number of points
    
    Textdraws:
    1. Hit timer - remaining time before impact enemy vehicle
    if the player does not hit anyone during this time, his transport will be destroyed
    2. Round time - time until the end of the round
    3. Derby score - current game results
    
    IMPORTANT: due to the fact that pickups that can be picked up on vehicle are incorrectly spawned on dynamic objects and water, pickups are dummy and logically process the player's position relative to the pickup, which creates an additional unnecessary load. It is not recommended to use pickups.
    
    DISCLAIMER:
    This is a demo version. Bugs are possible and there is no integration with the mod, statistics are not registered, the import of maps from files is not saved or the database is not implemented.
*/

#include <a_samp>
//#include <streamer>
#include "/tstudio/streamer"
//Use streamer version 2.9.4 or newer
#define FILTERSCRIPT

// Y_Less foreach macro
#tryinclude <foreach>
#if !defined foreach
    #define foreach(%1,%2) for (new %2 = 0; %2 < MAX_PLAYERS; %2++) if (IsPlayerConnected(%2))
    #define __SSCANF_FOREACH__
#endif

#if !defined _samp_included
    #error "Please include a_samp or a_npc before foreach"
#endif

#if !defined IsValidVehicle
    native IsValidVehicle(vehicleid);
#endif
// ----------------------------------------------------------------------------

#define COLOR_YELLOW 0xFFFF0070

// IMPORTANT: Change default world and interior here
#define DERBY_WORLD         666
#define DERBY_INT           0
#define DRAW_DISTANCE       300.0

#define MAX_DERBY_VEHMODELS 10
#define MAX_DERBY_SPAWNS    8
#define MAX_DERBY_PLAYERS   8
#define MAX_DERBY_SLOTS     4
#define MAX_DERBY_MAPS      3
#define MAX_DERBY_PICKUPS   3
#define minZ 1.0

#define VEHICLE_TYPE_OFFROAD     1
#define VEHICLE_TYPE_HEAVYTRUCKS 2
#define VEHICLE_TYPE_CLASSIC     3
#define VEHICLE_TYPE_RACE        4
#define DERBY_VEHICLE_TYPES      4

#define DIALOG_DERBYSET         3001
#define DIALOG_DERBYMAP         3002
#define DIALOG_DERBYMODELSTYPE  3003
#define DIALOG_DERBYVEHHEALTH   3004
#define DIALOG_DERBYSLOT        3005
#define DIALOG_DERBYROUNDTIME   3006
#define DIALOG_DERBYRESPTIME    3007
#define DIALOG_DERBYRESULTS     3008

// ----------------------------------------------------------------------------

new Text3D:DerbyVeh3DHealth[MAX_PLAYERS];
new PlayerText:DerbyTimeTD[MAX_PLAYERS];
new PlayerText:DerbyHitTimeTD[MAX_PLAYERS];
new Text:DerbyScoreTD;
new LastPlayerVehicleID[MAX_PLAYERS];

new DerbyMapNames[MAX_DERBY_MAPS][24] = 
{
    "Industrial", "Fl_Buildings", "5 Towers"
};

new DerbyVehTypeNames[DERBY_VEHICLE_TYPES][24] = 
{
    "Off-Road", "Heavy Trucks", "Classic", "Race"
};

new Float:DerbyMapCoords[MAX_DERBY_MAPS][MAX_DERBY_SPAWNS][4] =
{
    { // Industrial map
        {1134.5017,-3341.0771,16.1418,179.6916},
        {1134.2338,-3424.4478,16.1644,270.4014},
        {1175.4525,-3399.6255,11.0673,4.6967},
        {1209.9008,-3342.9070,16.1344,180.5693},
        {1252.4774,-3426.6328,16.1611,358.1123},
        {1328.4633,-3421.5100,16.1402,0.0878},
        {1330.0529,-3341.3386,16.1372,180.8723},
        {1254.2192,-3338.7666,16.1384,185.4795}
    },
    { // Fl_buildings 
        {3852.5339,1206.7079,41.8728,0.4236},
        {3874.9316,1309.4095,41.8628,176.2088},
        {3809.3979,1311.9929,41.8728,179.8227},
        {3767.4795,1310.0007,41.8728,180.6429},
        {3765.1829,1259.4191,42.4967,267.5242},
        {3768.0493,1216.2034,42.4940,307.6074},
        {3886.1504,1236.9247,42.4821,358.3589},
        {3899.4182,1253.2753,42.6105,88.9449}
    },
    { // 5 Towers
        {2400.2896,-3707.1487,179.8753,222.0314},
        {2426.1912,-3738.3149,179.8753,47.7558},
        {2427.0261,-3789.9456,179.8753,135.1154},
        {2402.9937,-3821.4707,179.8753,324.3149},
        {2502.0020,-3818.1099,179.8753,44.9277},
        {2480.5198,-3788.6082,179.8753,219.9556},
        {2506.6636,-3705.2351,179.8753,138.8208},
        {2480.6384,-3738.4058,179.8752,313.4248}
    }
};

new Float:DerbyPickupCoords[MAX_DERBY_MAPS][MAX_DERBY_PICKUPS][3] =
{
    { // Industrial map
        {1232.5519,-3381.2002,12.6735},
        {1174.0841,-3382.8835,11.0515},
        {1290.6992,-3383.7471,11.0511}
    },
    { // Fl_buildings
        {3808.0129,1255.5503,42.8705},
        {3926.7598,1291.0778,42.5231},
        {0.0, 0.0, 0.0}
    },
    { // 5 Towers
        {2453.5061,-3764.6721,171.0132},
        {0.0, 0.0, 0.0},
        {0.0, 0.0, 0.0}
    }
};

enum DerbyEnum
{
    bool:DerbySlotUsed,
    DerbySlotTotalPlayers,
    DerbySlotActivePlayers,
    DerbyRespawnTime,
    DerbyVehModel,
    DerbyVehType,
    DerbyRoundTime,
    DerbyStartTime,
    DerbyMapHitTime,
    DerbyHitTime,
    Float:DerbyVehHealth,
    Float:DerbyMapHealth,
    DerbyMap,
    DerbyMode,
    DerbyVirtualWorld,
    DerbyInterior,
    bool:DerbyUsePickups,
    bool:DerbyUseNOS,
    bool:DerbyUseOffRoadWheels
}
new DerbyMinigame[MAX_DERBY_SLOTS][DerbyEnum];
new NULL_DerbyMinigame[DerbyEnum];

enum DerbyPlayersEnum
{
    bool:onDerby,
    bool:onWaitingRespawn,
    DerbySlot,
    DerbyHitTime,
    DerbyScore
}
new DerbyPlayers[MAX_PLAYERS][DerbyPlayersEnum];
new NULL_DerbyPlayers[DerbyPlayersEnum];

// ----------------------------------------------------------------------------
forward Countdown(num, playerid);
forward ReturnPlayerOnMap(playerid);
forward RestartDerbyMode(slot);
forward SecTimer(); // trigger every second
// ----------------------------------------------------------------------------

static const VehilesListHeavyTrucks[20] =
{
    499, //Benson
    609, //Boxville Mission 
    498, //Boxville
    524, //Cement Truck 
    532, //Combine Harvester
    578, //DFT-30   
    486, //Dozer
    406, //Dumper
    573, //Dune
    455, //Flatbed
    588, //Hotdog
    403, //Linerunner   
    423, //Mr. Whoopee
    414, //Mule 
    443, //Packer
    515, //Roadtrain    
    514, //Tanker
    531, //Tractor  
    456, //Yankee
    582 //News Van
};

static const VehilesListOffRoad[11] =
{
    568, //Bandito
    424, //BF Injection
    504, //Bloodring Banger
    500, //Mesa
    444, //Monster  
    556, //Monster 2
    557, //Monster 3
    495, //Sandking
    505, //Rancher
    579, //Huntley
    554 //Yosemite
};

static const VehilesListClassic[21] =
{
    536, //Blade
    575, //Broadway
    534, //Remington
    567, //Savanna
    535, //Slamvan
    576, //Tornado  
    412, //Voodoo   
    542, //Clover
    603, //Phoenix  
    475, //Sabre
    492, //Greenwood
    466, //Glendale
    604, //Glendale shit
    467, //Oceanic
    566, //Tahoma
    474, //Hermes
    545, //Hustler
    517, //Majestic
    600, //Picador
    439, //Stallion
    491 //Virgo
};

static const VehilesListRace[19] =
{
    429, //Banshee
    541, //Bullet
    415, //Cheetah
    480, //Comet
    562, //Elegy
    565, //Flash
    434, //Hotknife
    494, //Hotring Racer    
    502, //Hotring Racer 2
    503, //Hotring Racer 3
    411, //Infernus
    559, //Jester
    561, //Stratum
    560, //Sultan
    506, //Super GT 
    451, //Turismo
    558, //Uranus
    555, //Windsor
    477 //ZR-350    
};
// ----------------------------------------------------------------------------

public OnFilterScriptInit()
{   
    // Change this timer to your second refresh timer
    SetTimer("SecTimer", 1000, true);
    
    for(new slot; slot < MAX_DERBY_SLOTS; slot++) DerbyInit(slot);
    
    // Industrial map
    new tmpobjid;
    
    tmpobjid = CreateDynamicObject(3620, 1232.965820, -3437.914794, 44.611106, 0.000000, 0.000022, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(16087, 1159.457153, -3365.374023, 23.442199, 0.000000, 0.000022, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(3673, 1158.523803, -3310.632324, 23.199474, -0.000007, 0.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(3673, 1307.438598, -3308.392333, 23.209520, -0.000022, 0.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18808, 1135.686157, -3342.435546, -10.610349, 0.000000, 0.000022, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18808, 1135.686157, -3422.541015, -10.610349, 0.000000, 0.000022, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(3673, 1184.651733, -3307.267822, 19.069488, 0.000000, 0.000007, 180.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1174.608398, -3402.027343, 9.056705, 0.000000, 0.000007, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1174.608398, -3382.196289, 9.036705, 0.000000, 0.000007, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1135.569335, -3441.640869, 12.433154, 10.000000, 0.000007, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1213.585937, -3441.433105, 12.468737, 10.000000, 0.000007, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(17023, 1272.288452, -3402.499511, 9.500000, 0.000000, 0.000000, 180.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1135.498046, -3323.383300, 12.393460, -10.000000, 0.000007, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1135.509277, -3343.050292, 14.126708, 0.000000, 0.000007, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1135.518066, -3362.732177, 12.423010, 9.999999, 0.000007, -0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1135.567260, -3382.476562, 10.646704, 0.000000, 0.000007, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1135.595458, -3402.258056, 12.426622, -9.999999, 0.000007, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1174.608398, -3342.963378, 9.056705, 0.000000, 0.000007, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1174.627319, -3362.939208, 9.064058, 0.000000, 0.000007, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1194.171386, -3342.895019, 11.561106, 0.000000, -14.999992, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1194.151611, -3382.478515, 13.273359, 0.000000, 15.000006, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1213.585937, -3362.490722, 12.443867, 9.999999, 0.000007, -0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1213.585937, -3323.368896, 12.423010, -10.000000, 0.000007, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1213.585937, -3343.043457, 14.126708, 0.000000, 0.000007, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1213.585937, -3382.378662, 10.696705, 0.000000, 0.000007, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1213.585937, -3402.258056, 12.426622, -9.999999, 0.000007, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1154.960083, -3342.970214, 11.619455, 0.000000, 15.000006, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(17023, 1272.288452, -3361.919677, 9.500000, 0.000000, 0.000000, 180.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1213.585937, -3421.935302, 14.126708, 0.000000, 0.000007, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1155.220581, -3382.386962, 13.250781, 0.000000, -14.999992, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1135.569335, -3421.960449, 14.146710, 0.000000, 0.000007, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1154.960083, -3421.971679, 11.619455, 0.000000, 15.000006, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1194.171386, -3421.987792, 11.561106, 0.000000, -14.999992, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1174.608398, -3422.004882, 9.056705, 0.000000, 0.000007, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(17023, 1194.807373, -3363.389160, 9.500000, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1174.714355, -3382.448730, 15.856735, 0.000000, 0.000007, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1233.146240, -3323.336914, 12.403776, -10.000000, 0.000007, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(17023, 1194.807373, -3402.499511, 9.500000, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(3673, 1232.875122, -3419.178955, 22.849504, 0.000000, 0.000022, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(16087, 1307.955932, -3363.011718, 23.922256, 0.000000, 0.000022, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(3673, 1278.645507, -3306.637939, 23.189506, 0.000000, 0.000022, 180.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1291.713500, -3402.027343, 9.056705, 0.000000, 0.000022, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1291.713500, -3382.196289, 9.036705, 0.000000, 0.000022, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1252.674438, -3441.406005, 12.433004, 10.000000, 0.000022, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1330.691040, -3441.581298, 12.432847, 10.000000, 0.000022, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18808, 1330.075439, -3342.883056, -10.610349, 0.000000, 0.000022, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1252.603149, -3323.375000, 12.432854, -10.000000, 0.000022, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1252.614379, -3343.050292, 14.126708, 0.000000, 0.000022, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1252.623168, -3362.732177, 12.423010, 9.999999, 0.000023, -0.000003, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1252.672363, -3382.476562, 10.646704, 0.000000, 0.000022, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1252.700561, -3402.258056, 12.426622, -9.999999, 0.000023, 0.000003, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1291.713500, -3342.963378, 9.056705, 0.000000, 0.000022, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1291.732421, -3362.939208, 9.064058, 0.000000, 0.000022, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1311.271362, -3342.895019, 11.580424, 0.000000, -14.999977, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1311.256713, -3382.478515, 13.273359, 0.000000, 15.000021, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1330.691040, -3362.490722, 12.443867, 9.999999, 0.000023, -0.000003, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1330.691040, -3323.374511, 12.403302, -10.000000, 0.000022, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1330.691040, -3343.043457, 14.126708, 0.000000, 0.000022, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1330.691040, -3382.378662, 10.696705, 0.000000, 0.000022, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1330.691040, -3402.258056, 12.426622, -9.999999, 0.000023, 0.000003, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1272.065185, -3342.970214, 11.619455, 0.000000, 15.000021, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1232.941406, -3382.476562, 10.656704, 0.000000, 0.000022, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1330.691040, -3421.935302, 14.126708, 0.000000, 0.000022, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1272.325683, -3382.386962, 13.250781, 0.000000, -14.999977, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1252.674438, -3421.960449, 14.146710, 0.000000, 0.000022, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1272.065185, -3421.971679, 11.619455, 0.000000, 15.000021, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1311.276489, -3421.987792, 11.561106, 0.000000, -14.999977, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1291.713500, -3422.004882, 9.056705, 0.000000, 0.000022, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1291.819458, -3382.448730, 15.856735, 0.000000, 0.000022, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(3620, 1232.788574, -3327.320800, 44.661098, 0.000000, 0.000022, -180.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18808, 1330.075439, -3422.592529, -10.610349, 0.000000, 0.000022, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(18769, 1233.146240, -3441.387451, 12.517277, 10.000000, 0.000007, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(3673, 1232.875122, -3345.426025, 22.849504, 0.000000, 0.000022, -90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(3673, 1307.453247, -3454.670410, 23.109470, -0.000029, 0.000000, -90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(3673, 1159.635620, -3455.619628, 22.949480, -0.000045, 0.000000, -90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(3673, 1281.296875, -3457.806884, 18.889488, 0.000000, 0.000029, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    tmpobjid = CreateDynamicObject(3673, 1187.301147, -3457.616699, 19.149478, 0.000000, 0.000045, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    
    // Fl_Buildings map
    tmpobjid = CreateDynamicObject(19890, 3987.100097, 1230.987915, 32.040664, 180.000000, -90.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretegroundl1_256", 0x00000000);
    tmpobjid = CreateDynamicObject(19890, 3961.732177, 1252.707397, 52.080596, -180.000000, -0.000014, -90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretegroundl1_256", 0x00000000);
    tmpobjid = CreateDynamicObject(19890, 3961.841796, 1222.717773, 52.050697, -180.000000, -0.000014, -90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretegroundl1_256", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, 3899.338623, 1269.466918, 46.025711, 90.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretegroundl1_256", 0x00000000);
    tmpobjid = CreateDynamicObject(19890, 3987.130126, 1295.947753, 32.040664, 180.000000, -90.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretegroundl1_256", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, 3982.523437, 1263.496093, 43.155666, 90.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretegroundl1_256", 0x00000000);
    tmpobjid = CreateDynamicObject(19890, 3940.951416, 1252.827514, 52.120586, -180.000000, -0.000014, -90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretegroundl1_256", 0x00000000);
    tmpobjid = CreateDynamicObject(19890, 3961.732177, 1242.928588, 58.760654, -180.000000, -0.000014, -90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretegroundl1_256", 0x00000000);
    tmpobjid = CreateDynamicObject(16077, 3766.761718, 1238.581787, 43.644565, 0.000000, 0.000000, -172.999938, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 8420, "carpark3_lvs", "greystones01_128", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, 3952.161376, 1269.196044, 46.165668, 90.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretegroundl1_256", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, 3936.879638, 1237.387573, 44.685676, 90.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretegroundl1_256", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, 3899.338623, 1237.337036, 46.025711, 90.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretegroundl1_256", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, 3936.879638, 1237.387573, 54.695739, 90.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretegroundl1_256", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, 3982.523437, 1263.496093, 53.145664, 90.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretegroundl1_256", 0x00000000);
    tmpobjid = CreateDynamicObject(19890, 3961.923339, 1202.145629, 32.040664, 180.000000, -90.000000, -90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretegroundl1_256", 0x00000000);
    tmpobjid = CreateDynamicObject(18765, 3936.282714, 1204.613525, 45.985671, 90.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 16640, "a51", "concretegroundl1_256", 0x00000000);
    tmpobjid = CreateDynamicObject(16077, 3845.071044, 1302.528320, 43.644565, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 8420, "carpark3_lvs", "greystones01_128", 0x00000000);
    
    CreateDynamicObject(5463, 3955.895019, 1380.387817, 60.936161, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(19531, 3802.131347, 1263.535888, 41.145706, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(10308, 3858.910156, 1156.980346, 41.859157, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(19531, 3925.439208, 1263.535888, 41.135719, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1224, 3951.968017, 1287.341918, 41.725715, 0.000000, 0.000000, 23.599998, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(4690, 3944.107421, 1145.861572, -8.205452, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(16132, 3957.349609, 1214.971679, 52.731330, 0.000000, 0.000000, -90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1436, 3855.288818, 1241.986572, 42.685722, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(7419, 3783.350585, 1345.806396, 33.992748, 0.000000, 0.000000, -180.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1440, 3937.325683, 1240.626953, 41.630756, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(2937, 3950.151367, 1266.545410, 42.227977, -95.999977, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1217, 3820.902343, 1296.678588, 41.515701, 0.000000, 0.000000, -31.899999, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1395, 3887.530761, 1351.285034, 23.490272, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1394, 3887.705078, 1351.465820, 76.020271, 0.000000, 0.000000, -142.500076, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1450, 3893.519287, 1267.819580, 41.705726, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(16652, 3952.985595, 1251.716918, 49.755760, 0.000000, 0.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1211, 3951.738281, 1272.436401, 41.395748, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1466, 3934.187500, 1240.684692, 42.265727, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1228, 3886.310546, 1228.059204, 41.655708, 0.000000, 0.000000, 177.099960, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1282, 3935.199462, 1226.057861, 41.695735, 0.000000, 0.000000, -11.599999, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1413, 3894.195556, 1237.360107, 42.305736, 0.000000, 0.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(19003, 3912.756835, 1253.073242, 40.785442, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(3864, 3962.848632, 1310.602294, 47.175704, 0.000000, 0.000000, 37.299983, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1436, 3855.288818, 1243.426757, 42.685722, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1438, 3924.063232, 1263.073486, 41.045719, 0.000000, 0.000000, -15.899998, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1441, 3855.622314, 1244.731811, 41.795711, 0.000000, 0.000000, -179.000061, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1309, 3984.603271, 1297.314697, 49.241947, 0.000000, 0.000000, -180.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(3864, 3910.587402, 1206.476562, 47.175704, 0.000000, 0.000000, -63.800010, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(3864, 3805.188720, 1214.132568, 47.175704, 0.000000, 0.000000, -139.899948, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(7926, 3976.601562, 1254.005615, 57.122619, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1466, 3899.867431, 1273.186035, 42.265727, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(5463, 3955.965087, 1380.547973, 24.446170, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(5005, 3818.775634, 1201.593139, 44.664562, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1217, 3825.214111, 1297.150512, 41.515701, 0.000000, 0.000000, -31.899999, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(9020, 3918.928222, 1273.553466, 46.968135, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(16652, 3956.411132, 1223.349121, 49.775749, 0.000000, 0.000000, -90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(16630, 3946.248535, 1221.454589, 43.649032, 0.000000, 90.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(5005, 3904.554687, 1201.553100, 44.644588, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(5005, 3904.265136, 1325.394409, 44.664562, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(16630, 3950.422363, 1221.454589, 43.649032, 0.000000, 90.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(11558, 3917.954345, 1237.260253, 56.012718, 0.000000, 0.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(16132, 3957.349609, 1270.281982, 52.731330, 0.000000, 0.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1217, 3832.469970, 1226.202148, 41.515701, 0.000000, 0.000000, -31.899999, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(16644, 3901.588378, 1254.779418, 41.153640, 0.000000, 180.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1428, 3903.052978, 1234.484985, 42.487361, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1466, 3898.926025, 1234.007934, 42.085716, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1344, 3893.525634, 1269.528320, 41.918144, 0.000000, 0.000000, -90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1217, 3781.677490, 1258.757324, 41.515701, 0.000000, 0.000000, -31.899999, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(16644, 3901.588378, 1252.179199, 41.153640, 0.000000, 180.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(3091, 3977.139648, 1263.329956, 41.675697, 0.000000, 0.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(5088, 3863.810546, 1290.741943, 50.044555, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(11099, 3758.792968, 1283.279418, 41.172271, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1685, 3921.119873, 1308.087524, 64.500099, 2.399998, -3.299998, 17.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(19089, 3921.052978, 1308.067016, 79.611793, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(19089, 3921.052978, 1308.067016, 72.261825, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(7909, 3750.500244, 1218.549682, 53.046184, 0.000000, 0.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1224, 3959.486083, 1291.552856, 41.725715, 0.000000, 0.000000, -14.500000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(16132, 3983.786132, 1301.201904, 53.013484, 0.000000, 179.700027, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(5088, 3871.932617, 1214.879760, 50.044555, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1436, 3872.136718, 1222.676635, 42.685722, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(3274, 3899.989746, 1238.726806, 50.466999, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(3274, 3905.608886, 1235.686523, 52.376983, 0.000000, -90.000000, 180.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1436, 3855.218750, 1241.986328, 43.585800, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(16630, 3954.694091, 1221.454589, 43.649032, 0.000000, 90.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(16630, 3958.935058, 1221.454589, 43.649032, 0.000000, 90.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(16630, 3963.229248, 1221.454589, 43.649032, 0.000000, 90.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(16630, 3946.088378, 1253.724609, 43.649032, 0.000000, 90.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(16630, 3950.369140, 1253.724609, 43.649032, 0.000000, 90.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(16630, 3954.600341, 1253.724609, 43.649032, 0.000000, 90.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(16630, 3958.881591, 1253.724609, 43.649032, 0.000000, 90.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(16630, 3963.103271, 1253.704589, 43.649032, 0.000000, 90.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1440, 3951.963134, 1272.497924, 41.630756, 0.000000, 0.000000, 177.499954, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(7419, 3704.315185, 1227.296752, 34.572792, 0.000000, 0.000000, -180.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(7419, 3707.567382, 1297.665039, 33.992748, 0.000000, 0.000000, -180.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(18769, 3748.340087, 1258.477661, 36.205310, 0.000000, 90.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1436, 3867.924316, 1282.888427, 42.685722, 0.000000, 0.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1390, 3921.042480, 1308.054565, 65.758895, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(4601, 3894.687011, 1346.392089, 31.720359, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(10308, 3779.847656, 1167.359008, 10.939164, 0.000000, 0.000000, -180.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(2971, 3865.872314, 1283.079223, 40.995731, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1440, 3971.969238, 1235.419433, 41.630756, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1436, 3870.046386, 1223.038330, 42.685722, 0.000000, 0.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(3864, 3911.431152, 1310.526977, 47.175704, 0.000000, 0.000000, 136.100006, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1438, 3916.507812, 1267.920532, 41.045719, 0.000000, 0.000000, 37.400005, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1436, 3971.219238, 1237.297973, 42.685722, 0.000000, 0.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1436, 3972.747314, 1237.268066, 42.685722, 0.000000, 0.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(3864, 3768.038574, 1270.868896, 47.175704, 0.000000, 0.000000, 157.900039, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(3864, 3838.566650, 1279.259277, 47.175704, 0.000000, 0.000000, 47.600070, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1217, 3788.464843, 1279.140747, 41.515701, 0.000000, 0.000000, -31.899999, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1217, 3766.897216, 1278.464721, 41.515701, 0.000000, 0.000000, -31.899999, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1217, 3771.328369, 1319.054321, 41.515701, 0.000000, 0.000000, -31.899999, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1217, 3793.056396, 1311.113769, 41.515701, 0.000000, 0.000000, -31.899999, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1217, 3830.264404, 1304.750610, 41.515701, 0.000000, 0.000000, -31.899999, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1217, 3879.166503, 1304.114624, 41.515701, 0.000000, 0.000000, -31.899999, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1217, 3890.392089, 1297.906372, 41.515701, 0.000000, 0.000000, -31.899999, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1217, 3927.481933, 1301.231201, 41.515701, 0.000000, 0.000000, -31.899999, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1217, 3841.133300, 1226.099975, 41.515701, 0.000000, 0.000000, -31.899999, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(1436, 3972.699707, 1210.297119, 42.685722, 0.000000, 0.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    CreateDynamicObject(2971, 3970.945556, 1210.359741, 41.055732, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 

    // 5 Towers
    tmpobjid = CreateDynamicObject(3458, 2454.305908, -3807.345214, 177.602035, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
    tmpobjid = CreateDynamicObject(3458, 2454.305908, -3724.562255, 177.602035, 0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
    tmpobjid = CreateDynamicObject(3458, 2454.305908, -3719.434082, 177.602035, 0.000000, 0.000000, 180.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
    tmpobjid = CreateDynamicObject(3458, 2497.057617, -3762.950439, 177.602035, 0.000000, 0.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
    tmpobjid = CreateDynamicObject(3458, 2454.305908, -3802.206054, 177.602035, 0.000000, 0.000000, 180.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
    tmpobjid = CreateDynamicObject(3458, 2491.937744, -3762.950439, 177.602035, 0.000000, 0.000000, -90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
    tmpobjid = CreateDynamicObject(3458, 2410.197509, -3762.950439, 177.602035, 0.000000, 0.000000, -90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
    tmpobjid = CreateDynamicObject(3458, 2415.304199, -3762.950439, 177.602035, 0.000000, 0.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
    tmpobjid = CreateDynamicObject(3458, 2450.688964, -3782.009521, 169.208496, 0.000000, -25.000000, -90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
    tmpobjid = CreateDynamicObject(3458, 2450.688964, -3744.722900, 169.218460, 0.000000, 25.000000, -90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
    tmpobjid = CreateDynamicObject(3458, 2455.779541, -3782.009521, 169.208496, 0.000000, 25.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
    tmpobjid = CreateDynamicObject(3458, 2455.770263, -3744.722900, 169.218460, 0.000000, -25.000000, 90.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
    tmpobjid = CreateDynamicObject(3458, 2435.480712, -3761.882568, 169.210586, 0.000000, 25.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
    tmpobjid = CreateDynamicObject(3458, 2435.480712, -3766.983398, 169.210586, 0.000000, -25.000000, 180.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
    tmpobjid = CreateDynamicObject(3458, 2471.767333, -3761.852539, 169.209381, 0.000000, -25.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
    tmpobjid = CreateDynamicObject(3458, 2471.767333, -3766.944580, 169.209381, 0.000000, 25.000000, 180.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE, DRAW_DISTANCE); 
    SetDynamicObjectMaterial(tmpobjid, 0, 19480, "signsurf", "sign", 0x00000000);
    
    tmpobjid = CreateDynamicObject(4585, 2414.114013, -3723.664062, 79.304466,
    0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE+100.0, DRAW_DISTANCE+100.0); 
    tmpobjid = CreateDynamicObject(4585, 2414.584472, -3804.780029, 79.304466,
    0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE+100.0, DRAW_DISTANCE+100.0); 
    tmpobjid = CreateDynamicObject(4585, 2492.107177, -3804.780029, 79.304466,
    0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE+100.0, DRAW_DISTANCE+100.0); 
    tmpobjid = CreateDynamicObject(4585, 2492.658447, -3721.451904, 79.304466,
    0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE+100.0, DRAW_DISTANCE+100.0); 
    tmpobjid = CreateDynamicObject(4585, 2453.541503, -3762.771240, 70.444389,
    0.000000, 0.000000, 0.000000, DERBY_WORLD, DERBY_INT, -1, DRAW_DISTANCE+100.0, DRAW_DISTANCE+100.0); 
    
    return 1;
}

public OnFilterScriptExit()
{
    // drop players data table
    for(new p = 0; p < MAX_PLAYERS; p++)
    {
        DerbyPlayers[p] = NULL_DerbyPlayers;
    }
    for(new slot = 0; slot < MAX_DERBY_SLOTS; slot++)
    {
        DerbyMinigame[slot] = NULL_DerbyMinigame;
    }
    return 1;
}

public OnPlayerConnect(playerid)
{
    DerbyTimeTD[playerid] = CreatePlayerTextDraw(playerid, 500.0, 400.0, "ROUND TIME:");
    PlayerTextDrawFont(playerid, DerbyTimeTD[playerid], 1); 
    PlayerTextDrawLetterSize(playerid, DerbyTimeTD[playerid], 0.25, 1.1); 
    PlayerTextDrawSetOutline(playerid, DerbyTimeTD[playerid], 1);
    PlayerTextDrawAlignment(playerid, DerbyTimeTD[playerid], 1);
    PlayerTextDrawColor(playerid, DerbyTimeTD[playerid], -1);
    PlayerTextDrawSetShadow(playerid, DerbyTimeTD[playerid], 0);
    PlayerTextDrawSetOutline(playerid, DerbyTimeTD[playerid], 1);
    PlayerTextDrawBackgroundColor(playerid, DerbyTimeTD[playerid], 51);
    PlayerTextDrawFont(playerid, DerbyTimeTD[playerid], 2);
    PlayerTextDrawSetProportional(playerid, DerbyTimeTD[playerid], 1);
    
    DerbyHitTimeTD[playerid] = CreatePlayerTextDraw(playerid, 500.0, 120.0, "HIT TIME:");
    PlayerTextDrawFont(playerid, DerbyHitTimeTD[playerid], 1); 
    PlayerTextDrawLetterSize(playerid, DerbyHitTimeTD[playerid], 0.25, 1.1); 
    PlayerTextDrawSetOutline(playerid, DerbyHitTimeTD[playerid], 1);
    PlayerTextDrawAlignment(playerid, DerbyHitTimeTD[playerid], 1);
    PlayerTextDrawColor(playerid, DerbyHitTimeTD[playerid], -1);
    PlayerTextDrawSetShadow(playerid, DerbyHitTimeTD[playerid], 0);
    PlayerTextDrawSetOutline(playerid, DerbyHitTimeTD[playerid], 1);
    PlayerTextDrawBackgroundColor(playerid, DerbyHitTimeTD[playerid], 51);
    PlayerTextDrawFont(playerid, DerbyHitTimeTD[playerid], 2);
    PlayerTextDrawSetProportional(playerid, DerbyHitTimeTD[playerid], 1);
    
    DerbyScoreTD = TextDrawCreate(15.0, 150.0, " "); 
    TextDrawFont(DerbyScoreTD, 1); 
    TextDrawLetterSize(DerbyScoreTD, 0.175, 0.9); 
    TextDrawSetOutline(DerbyScoreTD, 1);
    TextDrawAlignment(DerbyScoreTD, 1);
    TextDrawBackgroundColor(DerbyScoreTD, 0x00000066); 
    
    DerbyPlayers[playerid][onDerby] = false;
    DerbyPlayers[playerid][onWaitingRespawn] = false;
    DerbyPlayers[playerid][DerbySlot] = 0;
    DerbyPlayers[playerid][DerbyHitTime] = 0;
    DerbyPlayers[playerid][DerbyScore] = 0;
    return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
    DerbyPlayers[playerid][onDerby] = false;
    DerbyPlayers[playerid][onWaitingRespawn] = false;
    PlayerTextDrawDestroy(playerid, DerbyTimeTD[playerid]);
    PlayerTextDrawDestroy(playerid, DerbyHitTimeTD[playerid]);
    TextDrawDestroy(DerbyScoreTD);
    
    if(IsPlayerOnDerby(playerid))
    {
        new slot = DerbyPlayers[playerid][DerbySlot];
        DerbyMinigame[slot][DerbySlotTotalPlayers]--;
    }
    return 1;
}

//replace default public OnPlayerUpdate(playerid)
public SecTimer()
{   
    new tbtext[512];
    
    // ClearDerbyMapSlots
    for(new slot;slot < MAX_DERBY_SLOTS; slot++)
    {
        if(DerbyMinigame[slot][DerbySlotUsed])
        {
            if(DerbyMinigame[slot][DerbySlotTotalPlayers] <= 0)
            {
                DerbyMinigame[slot][DerbySlotUsed] = false;
                DerbyInit(slot);
            }
        }
    }
    
    foreach(new playerid : Player)
    {
        if(IsPlayerOnDerby(playerid))
        {
            new tmpstr[128];
            new Float: x, Float: y, Float: z;
            GetPlayerPos(playerid, x, y, z);
            new Float:health;
            GetVehicleHealth(LastPlayerVehicleID[playerid], health);
            new slot = DerbyPlayers[playerid][DerbySlot];
            new map = DerbyMinigame[slot][DerbyMap];
                
            if(z <= minZ)
            {
                if(!DerbyPlayers[playerid][onWaitingRespawn])
                {
                    OnVehicleDeath(GetPlayerVehicleID(playerid), playerid);
                }
            }
            
            new ctime, timestamp;
            if(DerbyMinigame[slot][DerbyStartTime])
            {
                timestamp = DerbyMinigame[slot][DerbyStartTime] + DerbyMinigame[slot][DerbyRoundTime] * 60;
                ctime = timestamp - gettime();
                if(ctime > 0)
                {
                    format(tmpstr, sizeof(tmpstr), 
                    "~w~Round Time ~y~%d:%d", ctime/60, ctime%60);
                    PlayerTextDrawSetString(playerid, DerbyTimeTD[playerid], tmpstr);
                } else {
                    PlayerTextDrawHide(playerid, DerbyTimeTD[playerid]);
                    DerbyMinigame[slot][DerbyStartTime] = 0;
                    EndDerbyMode(slot);
                }
                
                timestamp = DerbyPlayers[playerid][DerbyHitTime] + DerbyMinigame[slot][DerbyMapHitTime];
                ctime = timestamp - gettime();
                if(ctime > 0)
                {
                    if(ctime <= 10)
                    {
                        format(tmpstr, sizeof(tmpstr), 
                        "~w~Hit Time ~r~%d", ctime);                        
                        PlayerTextDrawSetString(playerid, DerbyHitTimeTD[playerid], tmpstr);
                        PlayerPlaySound(playerid,1138,0.0,0.0,0.0); // low hp sound warning
                    } else {
                        format(tmpstr, sizeof(tmpstr), 
                        "~w~Hit Time ~y~%d", ctime);
                        PlayerTextDrawSetString(playerid, DerbyHitTimeTD[playerid], tmpstr);
                    }
                } else {
                    PlayerTextDrawHide(playerid, DerbyHitTimeTD[playerid]);
                    SetVehicleHealth(LastPlayerVehicleID[playerid], 0);
                }
                
                
                new nickname[MAX_PLAYER_NAME];
                GetPlayerName(playerid, nickname, sizeof(nickname));
                if(!DerbyMinigame[slot][DerbyMode])
                {
                    ctime = abs(DerbyPlayers[playerid][DerbyScore]);
                    if(ctime > 0)
                    {
                        format(tmpstr, sizeof(tmpstr), 
                        "%s %d:%d~n~", nickname,
                        ctime/60, ctime%60);
                        strcat(tbtext, tmpstr);
                    } else {
                        format(tmpstr, sizeof(tmpstr), 
                        "%s 0:0~n~", nickname);
                        strcat(tbtext, tmpstr);
                    }
                } else {
                    format(tmpstr, sizeof(tmpstr), 
                    "%s: %d~n~", nickname, DerbyPlayers[playerid][DerbyScore]);
                    strcat(tbtext, tmpstr);
                }                   
            }
            
            if(!DerbyMinigame[slot][DerbyMode] && DerbyMinigame[slot][DerbyStartTime] > 0)
            {
                new remainingtime = DerbyMinigame[slot][DerbyStartTime] - gettime();
                if(DerbyMinigame[slot][DerbyRoundTime] - remainingtime > 40)
                {
                    if(DerbyMinigame[slot][DerbySlotActivePlayers] <= 1)
                    {
                        PlayerTextDrawHide(playerid, DerbyTimeTD[playerid]);
                        DerbyMinigame[slot][DerbyStartTime] = 0;
                        DerbyMinigame[slot][DerbySlotActivePlayers] = 0;
                        EndDerbyMode(slot);
                    }
                }
            }
            
            if(DerbyMinigame[slot][DerbyUsePickups])
            {
                for(new pickup; pickup < MAX_DERBY_PICKUPS; pickup++)
                {   
                    new Float: distance = GetVehicleDistanceFromPoint(GetPlayerVehicleID(playerid),
                    DerbyPickupCoords[map][pickup][0],
                    DerbyPickupCoords[map][pickup][1],
                    DerbyPickupCoords[map][pickup][2]);
                    
                    if(distance < 1.0 && distance > 0.10)
                    {
                        RepairVehicle(GetPlayerVehicleID(playerid));
                        SetVehicleHealth(LastPlayerVehicleID[playerid],DerbyMinigame[slot][DerbyMapHealth]);
                        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
                        GetVehicleHealth(GetPlayerVehicleID(playerid), health);
                        format(tmpstr, sizeof(tmpstr), "%.1f", health);
                        Update3DTextLabelText(DerbyVeh3DHealth[playerid], COLOR_YELLOW, tmpstr);
                    }
                }
            }
        }
    }
    TextDrawSetString(DerbyScoreTD, tbtext);
    return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(IsPlayerOnDerby(playerid))
    {
        if(oldstate == PLAYER_STATE_DRIVER)
        {
            PutPlayerInVehicle(playerid, LastPlayerVehicleID[playerid], 0);
        }
        if(newstate == PLAYER_STATE_SPECTATING)
        {
            new rand = random(MAX_DERBY_SPAWNS);
            new slot = DerbyPlayers[playerid][DerbySlot];
            new map = DerbyMinigame[slot][DerbyMap];
            SetPlayerCameraPos(playerid, DerbyMapCoords[map][rand][0],
            DerbyMapCoords[map][rand][1],
            DerbyMapCoords[map][rand][2]+10);
            
            SetPlayerCameraLookAt(playerid,
            DerbyMapCoords[map][rand][0],
            DerbyMapCoords[map][rand][1],
            DerbyMapCoords[map][rand][2]+10);
            
            InterpolateCameraPos(playerid, 
            DerbyMapCoords[map][rand][0], 
            DerbyMapCoords[map][rand][1],
            DerbyMapCoords[map][rand][2]+10,
            DerbyMapCoords[map][rand][0]-100,
            DerbyMapCoords[map][rand][1],
            DerbyMapCoords[map][rand][2]+10,
            DerbyMinigame[slot][DerbyRespawnTime]*2*1000, CAMERA_MOVE);
        }
    }
    return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
    if(IsPlayerOnDerby(playerid))
    {
        new slot = DerbyPlayers[playerid][DerbySlot];
        DerbyMinigame[slot][DerbySlotActivePlayers]--;
        if(DerbyMinigame[slot][DerbyMode] == 1) {
            if(!DerbyPlayers[playerid][onWaitingRespawn]) RespawnPlayerOnDerby(playerid);
        }
        TogglePlayerSpectating(playerid, true);
        DestroyVehicle(LastPlayerVehicleID[playerid]);
    }
    return 1;
}

/*
// This callback not used, all pickups updates triggered at SecTimer()
public OnPlayerPickUpPickup(playerid, pickupid)
{
    return 1;
}
*/

public OnVehicleDeath(vehicleid, killerid)
{
    // killerid - the driver of the destroyed transport.
    if(IsPlayerOnDerby(killerid))
    {   
        new slot = DerbyPlayers[killerid][DerbySlot];
        new playerid = GetClosestPlayer(killerid);
        new playername[MAX_PLAYER_NAME];
        new killername[MAX_PLAYER_NAME];
        GetPlayerName(playerid, playername, sizeof(playername));
        GetPlayerName(killerid, killername, sizeof(killername));
        
        new string[64];
        format(string, sizeof(string),
        "%s(%d) => %s(%d)",
        killername, killerid, playername, playerid);
        SendClientMessageToAll(COLOR_YELLOW, string);
        
        DerbyMinigame[slot][DerbySlotActivePlayers]--;
        if(!DerbyMinigame[slot][DerbyMode])
        {
            new timestamp = DerbyMinigame[slot][DerbyStartTime] - gettime();
            DerbyPlayers[killerid][DerbyHitTime] = 0;
            DerbyPlayers[killerid][DerbyScore] = timestamp;
            TogglePlayerSpectating(killerid, true);
            
            if(playerid != INVALID_PLAYER_ID) {
                PlayerSpectatePlayer(killerid, playerid);
                OnPlayerDeath(killerid, playerid, WEAPON_VEHICLE);
            } else {
                new closestcar = GetClosestCar(killerid);
                if(IsValidVehicle(closestcar))
                {
                    PlayerSpectateVehicle(killerid, closestcar);
                }
                OnPlayerDeath(killerid, killerid, WEAPON_VEHICLE);
            }
        } else if(DerbyMinigame[slot][DerbyMode] == 1) {
            if(playerid != INVALID_PLAYER_ID) {
                DerbyPlayers[playerid][DerbyScore]++;
                GameTextForPlayer(playerid, "+1 score", 3000, 3);
            }
            RespawnPlayerOnDerby(killerid);
        }
    }
    return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
    if(IsPlayerOnDerby(playerid))
    {
        // Get the damage status of all the components
        new panels, doors, lights, tires;
        GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
        
        new tmpstr[64];
        
        new Float:health;
        GetVehicleHealth(vehicleid, health);
        new slot = DerbyPlayers[playerid][DerbySlot];

        if(DerbyMinigame[slot][DerbyVehHealth]-health > 350)
        {
            SetPlayerDrunkLevel(playerid, 6000);
            SetTimerEx("SetPlayerDrunkLevel", 3000, false, "ii", playerid, 0);
        }
        DerbyMinigame[slot][DerbyVehHealth] = health;
        
        format(tmpstr, sizeof(tmpstr), "%.1f", health);
        Update3DTextLabelText(DerbyVeh3DHealth[playerid], COLOR_YELLOW, tmpstr);
        
        new closestcar = GetClosestCar(playerid);
        if(IsValidVehicle(closestcar))
        {
            if(GetDistanceToCar(playerid, closestcar) <= 5.0)
            {
                DerbyPlayers[playerid][DerbyHitTime] = gettime();
            }
        }
    }
    return 1;
}

public OnPlayerCommandText(playerid, cmdtext[])
{
    if (!strcmp(cmdtext, "/derby", true))
    {
        if(!IsPlayerOnDerby(playerid))
        {
            for(new slot = 0; slot < MAX_DERBY_SLOTS; slot++)
            {
                if(DerbyMinigame[slot][DerbySlotUsed])
                {
                    if(DerbyMinigame[slot][DerbySlotActivePlayers] < MAX_DERBY_PLAYERS)
                    {
                        JoinDerbyMode(playerid, slot);
                        return 1;
                    }
                }
            }
            SelectDerbySlotMenu(playerid);
        } else {
            LeaveDerbyMode(playerid);
        }
        return 1;
    }
    if (!strcmp(cmdtext, "/leave", true))
    {
        if(IsPlayerOnDerby(playerid))
        {
            LeaveDerbyMode(playerid);
        } else {
            SendClientMessage(playerid, COLOR_YELLOW, "You're not at the derby");
        }
        return 1;
    }
    // TEST CMDS SECTION 
    // IMPORTANT (Remove on Release version!!!!)
    if (!strcmp(cmdtext, "/slot", true))
    {
        for(new slot = 0; slot < MAX_DERBY_SLOTS; slot++)
        {
            printf("%i slot used %i", slot, DerbyMinigame[slot][DerbySlotUsed]);
        }
        return 1;
    }
    if (!strcmp(cmdtext, "/suicide", true))
    {
        SetVehicleHealth(GetPlayerVehicleID(playerid), 250.0);
        return 1;
    }
    if (!strcmp(cmdtext, "/lowhp", true))
    {
        SetVehicleHealth(GetPlayerVehicleID(playerid), 500.0);
        return 1;
    }
    if (!strcmp(cmdtext, "/testcars", true))
    {
        new slot = DerbyPlayers[playerid][DerbySlot];
        new map = DerbyMinigame[slot][DerbyMap];
        for(new i; i < MAX_DERBY_SPAWNS; i++) 
        {
            new vehicleid = 495;
            CreateVehicle(vehicleid,
            DerbyMapCoords[map][i][0],
            DerbyMapCoords[map][i][1],
            DerbyMapCoords[map][i][2]+1.5,
            DerbyMapCoords[map][i][3],
            -1, -1, -1);
        }
        return 1;
    }
    if (!strcmp(cmdtext, "/closest", true))
    {
        new tmpstr[64];
        new closestcar = GetClosestCar(playerid);
        new closestplayer = GetClosestPlayer(playerid);
        if(IsValidVehicle(closestcar))
        {
            format(tmpstr, sizeof(tmpstr),
            "vehid: %d, closestplayer: %d", closestcar, closestplayer);
            GameTextForPlayer(playerid, tmpstr , 3000, 3);
        }
        return 1;
    }
    if (!strcmp("/rot", cmdtext) && IsPlayerInAnyVehicle(playerid))
    {
        new
            Float:w, Float:x, Float:y, Float:z,
            clientMessage[80];

        GetVehicleRotationQuat(GetPlayerVehicleID(playerid), w, x, y, z);
        format(clientMessage, sizeof(clientMessage), "w:%.1f x:%.1f y:%.1f z:%.1f", w, x, y, z);
        SendClientMessage(playerid, 0xFFFFFFFF, clientMessage);
        return 1;
    }
    
    return 0;
}

stock ShowDerbyMainMenu(playerid)
{
    new slot = DerbyPlayers[playerid][DerbySlot];
    
    new tbtext[512];
    format(tbtext, sizeof(tbtext), 
    "Map\t{AFAFAF}%s\n\
    Derby mode\t{AFAFAF}%s\n\
    Vehicles type\t{AFAFAF}%s\n\
    Vehicles health\t{AFAFAF}%.1f\n\
    Round time\t{AFAFAF}%d min\n\
    Respawn time\t{AFAFAF}%d sec\n\
    Off-Road Wheels\t%s\n\
    NOS\t%s\n\
    Pickups\t%s\n\
    {AFAFAF}<< Back\n\
    {00FF00}>> START <<",
    DerbyMapNames[DerbyMinigame[slot][DerbyMap]],
    (DerbyMinigame[slot][DerbyMode]) ? ("Score") : ("Survival"),
    DerbyVehTypeNames[DerbyMinigame[slot][DerbyVehType]-1],
    DerbyMinigame[slot][DerbyMapHealth],
    DerbyMinigame[slot][DerbyRoundTime],
    DerbyMinigame[slot][DerbyRespawnTime],
    (DerbyMinigame[slot][DerbyUseOffRoadWheels]) ? ("{00FF00}[ON]") : ("{FF0000}[OFF]"),
    (DerbyMinigame[slot][DerbyUseNOS]) ? ("{00FF00}[ON]") : ("{FF0000}[OFF]"),
    (DerbyMinigame[slot][DerbyUsePickups]) ? ("{00FF00}[ON]") : ("{FF0000}[OFF]"));
    
    ShowPlayerDialog(playerid, DIALOG_DERBYSET, DIALOG_STYLE_TABLIST,
    "Derby settings",tbtext, "Select", "Cancel");
    return 1;
}

stock SelectDerbySlotMenu(playerid)
{
    new tbtext[256];
                
    for(new slot; slot < MAX_DERBY_SLOTS; slot++)
    {
        if(DerbyMinigame[slot][DerbySlotUsed])
        {
            new map = DerbyMinigame[slot][DerbyMap];
            strcat(tbtext, DerbyMapNames[map]);
            strcat(tbtext, "\n");
        } else {                
            strcat(tbtext, "{00FF00}Free slot\n");
        }
    }
    
    ShowPlayerDialog(playerid, DIALOG_DERBYSLOT, DIALOG_STYLE_LIST,
    "Join derby", tbtext, "Select", "Cancel");
    return 1;
}

stock ShowDerbyResults(slot, playerid)
{
    new tbtext[512], tmpstr[48];
                
    foreach(new i : Player)
    {
        if(IsPlayerOnDerby(i))
        {
            new nickname[MAX_PLAYER_NAME];
            GetPlayerName(i, nickname, sizeof(nickname));
            
            if(!DerbyMinigame[slot][DerbyMode])
            {
                new abstime = abs(DerbyPlayers[i][DerbyScore]);
                if(abstime > 0)
                {
                    format(tmpstr, sizeof(tmpstr),"%s\t%d:%d\n",
                    nickname, abstime/60, abstime%60);
                } else {
                    format(tmpstr, sizeof(tmpstr),"%s\tSurvived\n",
                    nickname);
                }
                strcat(tbtext, tmpstr);
            } else {
                format(tmpstr, sizeof(tmpstr),"%s\t%i\n",
                nickname, DerbyPlayers[i][DerbyScore]);
                strcat(tbtext, tmpstr);
            }
        }
    }
    
    ShowPlayerDialog(playerid, DIALOG_DERBYRESULTS, DIALOG_STYLE_TABLIST,
    "Derby results", tbtext, "Select", "Cancel");   
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    if(dialogid == DIALOG_DERBYSET)
    {
        if(response)
        {
            new slot = DerbyPlayers[playerid][DerbySlot];
            switch(listitem)
            {
                case 0: 
                {
                    new tbtext[24*MAX_DERBY_MAPS];
                    
                    for(new map; map < MAX_DERBY_MAPS; map++)
                    {
                        strcat(tbtext, DerbyMapNames[map]);
                        strcat(tbtext, "\n");
                    }
                    
                    ShowPlayerDialog(playerid, DIALOG_DERBYMAP, DIALOG_STYLE_LIST,
                    "Derby settings", tbtext, "Select", "Cancel");
                }
                case 1: 
                {
                    if(DerbyMinigame[slot][DerbyMode]) {
                        DerbyMinigame[slot][DerbyMode] = 0;
                    }
                    else DerbyMinigame[slot][DerbyMode] = 1;
                    ShowDerbyMainMenu(playerid);
                }
                case 2:
                {
                    ShowPlayerDialog(playerid, DIALOG_DERBYMODELSTYPE, DIALOG_STYLE_LIST,
                    "Choose derby vehicles type",
                     "OffRoad\n\
                     HeavyTrucks\n\
                     Classic\n\
                     Race",
                    "Select", "Cancel");
                }
                case 3:
                {
                    ShowPlayerDialog(playerid, DIALOG_DERBYVEHHEALTH, DIALOG_STYLE_INPUT,
                    "Derby settings", "Enter vehicle health (default 1000.0):",
                    "Select", "Cancel");
                }
                case 4:
                {
                    ShowPlayerDialog(playerid, DIALOG_DERBYROUNDTIME, DIALOG_STYLE_INPUT,
                    "Derby settings", "Enter round time (default 10 min):",
                    "Select", "Cancel");
                }
                case 5:
                {
                    ShowPlayerDialog(playerid, DIALOG_DERBYRESPTIME, DIALOG_STYLE_INPUT,
                    "Derby settings", "Enter respawn time (default 3 sec):",
                    "Select", "Cancel");
                }
                case 6:
                {
                    if(DerbyMinigame[slot][DerbyUseOffRoadWheels]) {
                        DerbyMinigame[slot][DerbyUseOffRoadWheels] = false;
                    }
                    else DerbyMinigame[slot][DerbyUseOffRoadWheels] = true;
                    ShowDerbyMainMenu(playerid);
                }
                case 7: 
                {
                    if(DerbyMinigame[slot][DerbyUseNOS]) {
                        DerbyMinigame[slot][DerbyUseNOS] = false;
                    }
                    else DerbyMinigame[slot][DerbyUseNOS] = true;
                    ShowDerbyMainMenu(playerid);
                }
                case 8: 
                {
                    if(DerbyMinigame[slot][DerbyUsePickups]) {
                        DerbyMinigame[slot][DerbyUsePickups] = false;
                    }
                    else DerbyMinigame[slot][DerbyUsePickups] = true;
                    ShowDerbyMainMenu(playerid);
                }
                case 9: DerbyMinigame[slot][DerbySlotUsed] = false;
                case 10: StartDerbyMode(playerid, DerbyPlayers[playerid][DerbySlot]);
            }
        } else {
            ShowDerbyMainMenu(playerid);
        }
    }
    if(dialogid == DIALOG_DERBYVEHHEALTH)
    {
        if(response)
        {
            if(!strlen(inputtext))
            {
                return ShowDerbyMainMenu(playerid);
            }
            if(strval(inputtext) <= 0)
            {
                return ShowDerbyMainMenu(playerid);
            }
            new slot = DerbyPlayers[playerid][DerbySlot];
            DerbyMinigame[slot][DerbyMapHealth] = floatstr(inputtext);
            return ShowDerbyMainMenu(playerid);
        } else {
            return ShowDerbyMainMenu(playerid);
        }
    }
    if(dialogid == DIALOG_DERBYROUNDTIME)
    {
        if(response)
        {
            if(!strlen(inputtext))
            {
                return ShowDerbyMainMenu(playerid);
            }
            if(strval(inputtext) <= 0)
            {
                return ShowDerbyMainMenu(playerid);
            }
            new slot = DerbyPlayers[playerid][DerbySlot];
            DerbyMinigame[slot][DerbyRoundTime] = strval(inputtext);
            return ShowDerbyMainMenu(playerid);
        } else {
            return ShowDerbyMainMenu(playerid);
        }
    }
    if(dialogid == DIALOG_DERBYRESPTIME)
    {
        if(response)
        {
            if(!strlen(inputtext))
            {
                return ShowDerbyMainMenu(playerid);
            }
            if(strval(inputtext) <= 0)
            {
                return ShowDerbyMainMenu(playerid);
            }
            new slot = DerbyPlayers[playerid][DerbySlot];
            DerbyMinigame[slot][DerbyRespawnTime] = strval(inputtext);
            return ShowDerbyMainMenu(playerid);
        } else {
            return ShowDerbyMainMenu(playerid);
        }
    }
    if(dialogid == DIALOG_DERBYMODELSTYPE)
    {
        if(response)
        {
            new slot = DerbyPlayers[playerid][DerbySlot];
            DerbyMinigame[slot][DerbyVehType] = listitem+1;
            return ShowDerbyMainMenu(playerid);
        } else {
            return ShowDerbyMainMenu(playerid);
        }
    }
    /*if(dialogid == DIALOG_DERBYMODEL)
    {
        if(response)
        {
            // Use if you want to specify the model manually
            if(!strlen(inputtext))
            {
                return ShowDerbyMainMenu(playerid);
            }
            if(strval(inputtext) <= 0)
            {
                return ShowDerbyMainMenu(playerid);
            }
            
            if(!IsValidDerbyVehicle(strval(inputtext)))
            {
                return ShowDerbyMainMenu(playerid);
            }
            
            new slot = DerbyPlayers[playerid][DerbySlot];
            DerbyMinigame[slot][DerbyVehModel] = strval(inputtext);
            return ShowDerbyMainMenu(playerid);
        } else {
            return ShowDerbyMainMenu(playerid);
        }
    }*/
    if(dialogid == DIALOG_DERBYMAP)
    {
        if(response)
        {
            new slot = DerbyPlayers[playerid][DerbySlot];
            DerbyMinigame[slot][DerbyMap] = listitem;
            return ShowDerbyMainMenu(playerid);
        }
        else return ShowDerbyMainMenu(playerid);
    }
    if(dialogid == DIALOG_DERBYSLOT)
    {
        if(response)
        {
            if(DerbyMinigame[listitem][DerbySlotUsed])
            {
                DerbyPlayers[playerid][DerbySlot] = listitem;
                JoinDerbyMode(playerid, listitem);
            } else {
                DerbyMinigame[listitem][DerbySlotUsed] = true;
                DerbyPlayers[playerid][DerbySlot] = listitem;
                DerbyInit(listitem);
                return ShowDerbyMainMenu(playerid);
                //StartDerbyMode(playerid, listitem);
            }
        } else {
            SelectDerbySlotMenu(playerid);
        }
    }
    // END DIALOGS
    return 1;
}

// ----------------------------------------------------------------------------

stock DerbyInit(slot)
{
    // Preset Derby game params
    DerbyMinigame[slot][DerbyRespawnTime] = 3;
    DerbyMinigame[slot][DerbyVehModel] = 495;
    DerbyMinigame[slot][DerbyVehType] = VEHICLE_TYPE_OFFROAD;
    DerbyMinigame[slot][DerbyRoundTime] = 10;
    DerbyMinigame[slot][DerbyStartTime] = 0;
    DerbyMinigame[slot][DerbyMapHealth] = 1500;
    DerbyMinigame[slot][DerbyVehHealth] = DerbyMinigame[slot][DerbyMapHealth];
    DerbyMinigame[slot][DerbyMap] = 0;
    DerbyMinigame[slot][DerbyVirtualWorld] = DERBY_WORLD;
    DerbyMinigame[slot][DerbyInterior] = DERBY_INT;
    DerbyMinigame[slot][DerbyUseNOS] = false;
    DerbyMinigame[slot][DerbyUseOffRoadWheels] = false;
    DerbyMinigame[slot][DerbyUsePickups] = false;
    DerbyMinigame[slot][DerbyMapHitTime] = 60;
    DerbyMinigame[slot][DerbySlotTotalPlayers] = 0;
    DerbyMinigame[slot][DerbyMode] = 1;
}

stock JoinDerbyMode(playerid, slot)
{
    new tmpstr[128];
    new nickname[MAX_PLAYER_NAME];
    GetPlayerName(playerid, nickname, sizeof(nickname));
    
    DerbyPlayers[playerid][onDerby] = true;
    
    PlayerTextDrawShow(playerid, DerbyTimeTD[playerid]);
    PlayerTextDrawShow(playerid, DerbyHitTimeTD[playerid]);
    TextDrawShowForPlayer(playerid, DerbyScoreTD);
     
    format(tmpstr, sizeof(tmpstr),"%s joined derby (/derby)", nickname);
    SendClientMessageToAll(COLOR_YELLOW, tmpstr);
    
    new Float: x, Float: y, Float: z, Float: a;
    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, a);
    
    SetPlayerVirtualWorld(playerid, DerbyMinigame[slot][DerbyVirtualWorld]);
    SetPlayerInterior(playerid, DerbyMinigame[slot][DerbyInterior]);
    DerbyPlayers[playerid][DerbySlot] = slot;
    DerbyPlayers[playerid][DerbyHitTime] = gettime();
    DerbyMinigame[slot][DerbySlotTotalPlayers]++;
    
    if(GetPlayerVehicleID(playerid)) DestroyVehicle(GetPlayerVehicleID(playerid));
    GameTextForPlayer(playerid, "DERBY ~g~ON", 3000, 3);
    
    TogglePlayerSpectating(playerid, true);         
    
    if(!DerbyPlayers[playerid][onWaitingRespawn]) RespawnPlayerOnDerby(playerid);
    return 1;
}

stock LeaveDerbyMode(playerid)
{
    if(DerbyPlayers[playerid][onWaitingRespawn])
    {
        SendClientMessage(playerid, COLOR_YELLOW, "You not spawned. Try again after spawn");
        return false;
    }
    new tmpstr[128];
    new nickname[MAX_PLAYER_NAME];
    GetPlayerName(playerid, nickname, sizeof(nickname));
    
    DerbyPlayers[playerid][onDerby] = false;
    SetPlayerVirtualWorld(playerid, 0);
    SetPlayerInterior(playerid, 0);
    
    DerbyPlayers[playerid][DerbyHitTime] = 0;
    new slot = DerbyPlayers[playerid][DerbySlot];
    DerbyMinigame[slot][DerbySlotTotalPlayers]--;
    
    format(tmpstr, sizeof(tmpstr),"%s leave derby (/derby)", nickname);
    SendClientMessageToAll(COLOR_YELLOW, tmpstr);

    GameTextForPlayer(playerid, "DERBY ~r~OFF", 3000, 3);
    
    PlayerTextDrawHide(playerid, DerbyTimeTD[playerid]);
    PlayerTextDrawHide(playerid, DerbyHitTimeTD[playerid]);
    TextDrawHideForPlayer(playerid, DerbyScoreTD);
    Delete3DTextLabel(DerbyVeh3DHealth[playerid]);
    DestroyVehicle(LastPlayerVehicleID[playerid]);
    SpawnPlayer(playerid);
    
    return 1;
}

stock StartDerbyMode(playerid, slot)
{
    new tmpstr[128];
    new nickname[MAX_PLAYER_NAME];
    GetPlayerName(playerid, nickname, sizeof(nickname));
    new map = DerbyMinigame[slot][DerbyMap];
    
    if(IsPlayerOnDerby(playerid))
    {
        SendClientMessage(playerid, COLOR_YELLOW, "Type /leave to exit from derby");
        return false;
    } else {
        DerbyPlayers[playerid][onDerby] = true;
        PlayerTextDrawShow(playerid, DerbyTimeTD[playerid]);
        PlayerTextDrawShow(playerid, DerbyHitTimeTD[playerid]);
        TextDrawShowForPlayer(playerid, DerbyScoreTD);
    
        if(DerbyMinigame[slot][DerbyUsePickups])
        {
            for(new pickup; pickup < MAX_DERBY_PICKUPS; pickup++)
            {   
                new pickupmodel = 3096; // heal pickup
                //new pickupmodel = 19816; // NOS pickup
                new type = 2;
                CreatePickup(pickupmodel, type,
                DerbyPickupCoords[map][pickup][0],
                DerbyPickupCoords[map][pickup][1],
                DerbyPickupCoords[map][pickup][2], 
                GetPlayerVirtualWorld(playerid));
            }
        }
            
        format(tmpstr, sizeof(tmpstr), 
        "%s start derby map '%s' (/derby)", nickname, DerbyMapNames[map]);
        SendClientMessageToAll(COLOR_YELLOW, tmpstr);
        
        new Float: x, Float: y, Float: z, Float: a;
        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, a);
        
        SetPlayerVirtualWorld(playerid, DerbyMinigame[slot][DerbyVirtualWorld]);
        SetPlayerInterior(playerid, DerbyMinigame[slot][DerbyInterior]);
        DerbyPlayers[playerid][DerbySlot] = slot;
        DerbyMinigame[slot][DerbyStartTime] = gettime();
        DerbyPlayers[playerid][DerbyHitTime] = gettime();
        DerbyMinigame[slot][DerbySlotUsed] = true;
        DerbyMinigame[slot][DerbySlotTotalPlayers]++;

        if(GetPlayerVehicleID(playerid)) DestroyVehicle(GetPlayerVehicleID(playerid));
        GameTextForPlayer(playerid, "DERBY ~g~ON", 3000, 3);
        
        TogglePlayerSpectating(playerid, true);         
        
        if(!DerbyPlayers[playerid][onWaitingRespawn]) RespawnPlayerOnDerby(playerid);
    }
    return true;
}

public RestartDerbyMode(slot)
{
    foreach(new playerid : Player)
    {
        if(IsPlayerOnDerby(playerid))
        {
            //TogglePlayerSpectating(playerid, false);
            DerbyMinigame[slot][DerbySlotActivePlayers]++;
            DerbyPlayers[playerid][DerbySlot] = slot;
            DerbyMinigame[slot][DerbyStartTime] = gettime();
            new randommap = random(MAX_DERBY_MAPS-1);
            DerbyMinigame[slot][DerbyMap] = randommap;
            DerbyPlayers[playerid][DerbyHitTime] = gettime();
            GameTextForPlayer(playerid, "DERBY ~g~STARTED ~w~AGAIN", 3000, 3);
            if(!DerbyPlayers[playerid][onWaitingRespawn]) RespawnPlayerOnDerby(playerid);
        }
    }
    return 1;
}

stock EndDerbyMode(slot)
{
    foreach(new playerid : Player)
    {
        if(IsPlayerOnDerby(playerid))
        {
            TogglePlayerSpectating(playerid, true);         
            PlayerTextDrawHide(playerid, DerbyTimeTD[playerid]);
            PlayerTextDrawHide(playerid, DerbyHitTimeTD[playerid]);
            Delete3DTextLabel(DerbyVeh3DHealth[playerid]);
            DestroyVehicle(LastPlayerVehicleID[playerid]);
            ShowDerbyResults(slot, playerid);
            SetTimerEx("RestartDerbyMode", 5000, false, "i", slot);
        }
    }
    return 1;
}

stock SpawnDerbyVehicle(playerid)
{
    new randvehicle, vehicleid;
    new rand = random(MAX_DERBY_SPAWNS);
    new slot = DerbyPlayers[playerid][DerbySlot];
    new map = DerbyMinigame[slot][DerbyMap];
    new Float:a;
    new tmpstr[64];
    new Float:health;
    
    switch(DerbyMinigame[slot][DerbyVehType])
    {
        case VEHICLE_TYPE_RACE: 
        {
            randvehicle = random(sizeof(VehilesListRace));
            vehicleid = VehilesListRace[randvehicle];
        }
        case VEHICLE_TYPE_CLASSIC: 
        {
            randvehicle = random(sizeof(VehilesListClassic));
            vehicleid = VehilesListClassic[randvehicle];
        }
        case VEHICLE_TYPE_HEAVYTRUCKS: 
        {
            randvehicle = random(sizeof(VehilesListHeavyTrucks));
            vehicleid = VehilesListHeavyTrucks[randvehicle];
        }
        case VEHICLE_TYPE_OFFROAD: 
        {
            randvehicle = random(sizeof(VehilesListOffRoad));
            vehicleid = VehilesListOffRoad[randvehicle];
        }
        default: 
        {
            randvehicle = random(sizeof(VehilesListOffRoad));
            vehicleid = VehilesListOffRoad[randvehicle];
        }
    }
    
    new color1 = -1, color2 = -1; // Random colors
    new respawntime = -1; // norespawn
    
    LastPlayerVehicleID[playerid] = CreateVehicle(vehicleid,
    DerbyMapCoords[map][rand][0],
    DerbyMapCoords[map][rand][1],
    DerbyMapCoords[map][rand][2],
    DerbyMapCoords[map][rand][3],
    color1, color2, respawntime);
    
    if(DerbyMinigame[slot][DerbyInterior] != 0) {
        LinkVehicleToInterior(LastPlayerVehicleID[playerid], DerbyMinigame[slot][DerbyInterior]);
    }
    SetVehicleVirtualWorld(LastPlayerVehicleID[playerid], DerbyMinigame[slot][DerbyVirtualWorld]);
    
    SetVehiclePos(LastPlayerVehicleID[playerid], 
    DerbyMapCoords[map][rand][0],
    DerbyMapCoords[map][rand][1],
    DerbyMapCoords[map][rand][2] + 1.2);
    
    RepairVehicle(LastPlayerVehicleID[playerid]);
    SetVehicleHealth(LastPlayerVehicleID[playerid], DerbyMinigame[slot][DerbyMapHealth]);
    GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    SetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    
    Delete3DTextLabel(DerbyVeh3DHealth[playerid]);
    DerbyVeh3DHealth[playerid] = Create3DTextLabel("health", COLOR_YELLOW,
    0, 0, 0, 50.0, GetPlayerVirtualWorld(playerid), 0);
    Attach3DTextLabelToVehicle(DerbyVeh3DHealth[playerid], 
    LastPlayerVehicleID[playerid], 0.0, 0.0, 0.2);
    GetVehicleHealth(LastPlayerVehicleID[playerid], health);
    format(tmpstr, sizeof(tmpstr), "%.1f", health);
    Update3DTextLabelText(DerbyVeh3DHealth[playerid], COLOR_YELLOW, tmpstr);
    
    if(DerbyMinigame[slot][DerbyUseNOS]) {
        if(IsValidTuneVehicle(LastPlayerVehicleID[playerid])) {
            AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
        }
    }
    
    if(DerbyMinigame[slot][DerbyUseOffRoadWheels]) {
        if(IsValidTuneVehicle(LastPlayerVehicleID[playerid])) {
            AddVehicleComponent(LastPlayerVehicleID[playerid], 1025);
        }
    }
     
    return LastPlayerVehicleID[playerid];
}

stock IsPlayerOnDerby(playerid) 
{
    if(DerbyPlayers[playerid][onDerby]) return true;
    else return false;
}

stock RespawnPlayerOnDerby(playerid, time = -1)
{
    DerbyPlayers[playerid][onWaitingRespawn] = true;
    new slot = DerbyPlayers[playerid][DerbySlot];
    if(time == -1) time = DerbyMinigame[slot][DerbyRespawnTime];
    SetTimerEx("ReturnPlayerOnMap", time * 1000, false, "i", playerid);
    Countdown(time, playerid);
}

public ReturnPlayerOnMap(playerid)
{   
    DerbyPlayers[playerid][onWaitingRespawn] = false;
    DerbyPlayers[playerid][DerbyHitTime] = gettime();
    
    PlayerTextDrawShow(playerid, DerbyHitTimeTD[playerid]);
    PlayerTextDrawShow(playerid, DerbyTimeTD[playerid]);
    TextDrawShowForPlayer(playerid, DerbyScoreTD);
    
    SetPlayerDrunkLevel(playerid, 0);
    
    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING) TogglePlayerSpectating(playerid, false);
    
    if(IsValidVehicle(LastPlayerVehicleID[playerid])) DestroyVehicle(LastPlayerVehicleID[playerid]);
    
    SpawnDerbyVehicle(playerid);
    
    PutPlayerInVehicle(playerid, LastPlayerVehicleID[playerid], 0);
}

public Countdown(num, playerid)
{
    // Run gametext counter 1,2,3 start
    new string[32];
    if (num > 0)
    {
        format(string, sizeof(string), "~g~%d", num);
        PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
        GameTextForPlayer(playerid, string, 1400, 4);
        
        SetTimerEx("Countdown", 1000, false, "ii", num -1, playerid);
    } else {
        PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
        format(string, sizeof(string), "~n~~n~~g~Go!");
        GameTextForPlayer(playerid, string, 1000, 4);
    }
    return true;
}

stock IsValidTuneVehicle(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 446,432,448,452,424,453,454,461,462,463,468,471,430,
        472,449,473,481,484,493,509,510,521,538,522,523,532,537,
        570,581,586,590,569,595,604,611: return false;
    }
    return true;
}

stock IsValidDerbyVehicle(modelid)
{
    if(modelid < 400 || modelid > 611) return false;

    // Forbidden vehs for all
    switch(modelid)
    {
        case 590, 570, 569, 538, 537, 449: return false; // Trains
        case 441, 464, 594, 501, 465, 564: return false; // RC Toys
        case 606, 607, 608, 610, 611, 584, 591, 450, 435: return false; // Trailers
        case 520, 425, 447, 430, 476, 432, 601: return false; // War vehs
        case 406, 407, 486: return false; // Special Vehs
    }
    
    return true;
}

stock abs(int) {
    if(int < 0) {
        return -int;
    }
    return int;
}

stock Float: GetDistanceBetweenPlayers(Player1, Player2)
{
    static
        Float: fX, Float: fY, Float: fZ, Float: fDistance;

    if( GetPlayerVirtualWorld( Player1 ) == GetPlayerVirtualWorld( Player2 ) 
    && GetPlayerPos( Player2, fX, fY, fZ ) )
        fDistance = GetPlayerDistanceFromPoint( Player1, fX, fY, fZ );

    return fDistance;
}

stock GetClosestPlayer(playerid)
{
    new nearest_player = INVALID_PLAYER_ID,
        Float:nearest_distance = 99999.99,
        Float:player_distance,
        Float:x, Float:y, Float:z;

    GetPlayerPos(playerid, x, y, z);
    foreach(new i: Player) {

        if(i == playerid) continue;
        player_distance = GetPlayerDistanceFromPoint(i, x, y, z);

        if(player_distance < nearest_distance) {
            nearest_distance = player_distance;
            nearest_player = i;
        }
    }
    return nearest_player;
}

stock GetDistanceToCar(playerid,carid) 
{
    //By Darkrealm (Edited by Sacky)
    new Float:dis;
    new Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2;
    if (!IsPlayerConnected(playerid)) {
        return -1;
    }
    GetPlayerPos(playerid,x1,y1,z1);
    GetVehiclePos(carid,x2,y2,z2);
    dis = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)
    + floatpower(floatabs(floatsub(y2,y1)),2) + floatpower(floatabs(floatsub(z2,z1)),2));
    return floatround(dis);
}

stock GetClosestCar(playerid) 
{
    if (!IsPlayerConnected(playerid)) {
        return -1;
    }
    new Float:prevdist = 100000.000;
    new prevcar;
    for (new carid = 0; carid < MAX_VEHICLES; carid++) {
        if(carid != GetPlayerVehicleID(playerid))
        {
            new Float:dist = GetDistanceToCar(playerid,carid);
            if ((dist < prevdist)) {
                prevdist = dist;
                prevcar = carid;
            }
        }
    }
    return prevcar;
}

stock GetVehicleType(vehicleid)
{
    new type;
    
    switch(GetVehicleModel(vehicleid))
    {
        case 
        499, //Benson
        609, //Boxville Mission 
        498, //Boxville
        524, //Cement Truck 
        532, //Combine Harvester
        578, //DFT-30   
        486, //Dozer
        406, //Dumper
        573, //Dune
        455, //Flatbed
        588, //Hotdog
        403, //Linerunner   
        423, //Mr. Whoopee
        414, //Mule 
        443, //Packer
        515, //Roadtrain    
        514, //Tanker
        531, //Tractor  
        456, //Yankee
        582 //News Van
        : type = VEHICLE_TYPE_HEAVYTRUCKS;

        case 
        568, //Bandito
        424, //BF Injection
        504, //Bloodring Banger
        500, //Mesa
        444, //Monster  
        556, //Monster 2
        557, //Monster 3
        495, //Sandking
        505, //Rancher
        579, //Huntley
        554 //Yosemite
        : type = VEHICLE_TYPE_OFFROAD;

        case 
        536, //Blade
        575, //Broadway
        534, //Remington
        567, //Savanna
        535, //Slamvan
        576, //Tornado  
        412, //Voodoo   
        542, //Clover
        603, //Phoenix  
        475, //Sabre
        492, //Greenwood
        466, //Glendale
        604, //Glendale shit
        467, //Oceanic
        566, //Tahoma
        474, //Hermes
        545, //Hustler
        517, //Majestic
        600, //Picador
        439, //Stallion
        491 //Virgo
        : type = VEHICLE_TYPE_CLASSIC;

        case 
        429, //Banshee
        541, //Bullet
        415, //Cheetah
        480, //Comet
        562, //Elegy
        565, //Flash
        434, //Hotknife
        494, //Hotring Racer    
        502, //Hotring Racer 2
        503, //Hotring Racer 3
        411, //Infernus
        559, //Jester
        561, //Stratum
        560, //Sultan
        506, //Super GT 
        451, //Turismo
        558, //Uranus
        555, //Windsor
        477 //ZR-350    
        : type = VEHICLE_TYPE_RACE;
    }
    return type;
}